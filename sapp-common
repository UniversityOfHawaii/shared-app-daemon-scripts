#! /bin/bash
# sapp - Run Tomcat servlet container for systemd.
#     - 2008-10-02 Russell Tokuyama (UH ITS)
#
# $Id$
#
# Mod: 2008-11-25 russ@hawaii.edu; Silenced error output of kill.
#      2008-12-10 jbeutel@hawaii.edu; added JMX and wait for stop before kill
#      2009-04-06 jbeutel@hawaii.edu; updated JMX config
#      2009-07-10 russ@hawaii.edu; Fixed ps_tomcat to find the JVM process
#      2009-09-14 jbeutel@hawaii.edu; use out-of-the-box JMX auth instead of single-port agent
#      2009-09-15 jbeutel@hawaii.edu; optionally specify garbage collector for load testing
#      2009-09-17 jbeutel@hawaii.edu; optional socket MBean agent for statistics only (no logging)
#      2009-11-04 jbeutel@hawaii.edu; added YourKit option & updated versions
#      2009-12-02 jbeutel@hawaii.edu; specify private network for JMX callback
#      2010-02-22 jbeutel@hawaii.edu; on stop wait for listening port to close
#      2010-03-10 jbeutel@hawaii.edu; parameterize and allow for overrides
#      2013-07-12 jbeutel@hawaii.edu; updated default jdk to Solaris 1.6.0_51
#      2015-12-02 cahana@hawaii.edu; merged with app script from the current RHEL servers
#      2016-12-04 jbeutel@hawaii.edu; added JMX_RMI_PORT & updated defaults
#      2016-04-18 cahana@hawaii.edu; commented out YourKit Profiler references
#      2018-05-21 cahana@hawaii.edu; removed https.protocols from JVM_SECURITY to work with CAS 5/Tomcat 8.5
#      2019-04-29 duckart@hawaii.edu; Differentiate the Tomcat not started messages.
#      2019-07-19 jbeutel@hawaii.edu; added netstat_port() support for macOS 10.14
#      2021-02-11 jbeutel@hawaii.edu; stop specifying gzip path, for macOS 10.15
#      2021-02-11 jbeutel@hawaii.edu; wait for default JMX_RMI_PORT to close
#      2022-06-20 jbeutel@hawaii.edu; port for RHEL7 systemd
#      2022-07-19 jbeutel@hawaii.edu; add check_context_startup()
#      2022-07-28 jbeutel@hawaii.edu; default to no socketStatisticsAgent.jar
#      2022-08-02 jbeutel@hawaii.edu; renamed to sapp-common, to make app-common backwards-compatible
#      2022-09-16 jbeutel@hawaii.edu; widen GOOD server startup regexp
#      2022-09-20 jbeutel@hawaii.edu; friendly message on kill of tail catalina.out
#      2022-10-20 jbeutel@hawaii.edu; widen BAD server startup regexp
#      2022-10-20 jbeutel@hawaii.edu; validate pidfile
#      2022-10-27 jbeutel@hawaii.edu; stricter ps_tomcat matches
#      2022-11-01 jbeutel@hawaii.edu; age_logs() also works when $LOG_DIR is a symbolic link
#      2023-03-15 jbeutel@hawaii.edu; RHEL8 compatibility
#      2023-05-02 jbeutel@hawaii.edu; use --user instance of systemd on RHEL8
#---------------------------------------------------------------------
# Spec:
#   1. Run by systemd as the daemon user (Type=forking).
#   2. Returns
#        0 if successfully starts or stops Tomcat and context
#        non-0 if Tomcat or context fails to start or stop
#---------------------------------------------------------------------
# Install:
#   1. Install as sapp-common in /usr/local/bin/appDaemon.
#   2. Symlink from /usr/local/bin/appDaemon/sapp-common to sapp in APP_USER's home dir.
#   3. For convenience, add APP_USER's home dir to PATH env var.
#---------------------------------------------------------------------
#

# You shouldn't need to change variable settings in this script;
# you can override all variables like FOO=${FOO:-default} in the app.parameters file.

set -u  # treat expansion of unset variables (without a default) as an error

ps_comm() {
    ps -p $1 -co comm | tail -1
}

# Allow use only by systemd, so it always knows if this app is running.
if [[ $(ps_comm 1) != "systemd" ]]; then
  stdbuf -eL echo "This app script is intended for running on a systemd platform such as RHEL7 or RHEL8." 1>&2
  exit 64 # EX_USAGE Command line usage error
fi
if [[ $(ps_comm $PPID) != "systemd" ]]; then
  stdbuf -eL echo "Do not run this sapp script directly, so RHEL7/8 systemd can manage what is running;" 1>&2
  stdbuf -eL echo "instead, as the daemon user, use 'app {start|stop|check|...}'" 1>&2
  exit 77 # EX_NOPERM Permission denied
fi

# Require CATALINA_PID be defined in the systemd service file, not in $PARAM_FILE (which is loaded next).
APP_USER=$(whoami)
if [[ $PPID -eq 1 ]]; then  # systemd --system
  SERVICE_FILE="/etc/systemd/system/tomcat_${APP_USER}.service"
else    # systemd --user
  SERVICE_FILE="$HOME/.config/systemd/user/tomcat.service"
fi
if [ -z "${CATALINA_PID:-}" ]; then
  stdbuf -eL echo "CATALINA_PID Environment and PIDFile should be set in ${SERVICE_FILE}" 1>&2
  exit 78 # EX_CONFIG Configuration error
fi
SAVED_CATALINA_PID=${CATALINA_PID}

# include parameters from the daemon user's home dir
APP_HOME=${HOME:?}
PARAM_FILE=$APP_HOME/app.parameters
if [ ! -f $PARAM_FILE ]; then
  stdbuf -eL echo "$PARAM_FILE not found.  (Be sure that systemd runs $0 with User= the daemon user.)" 1>&2
  exit 72 # EX_OSFILE Critical OS file missing
fi
. $PARAM_FILE
CATALINA_PID=${SAVED_CATALINA_PID}  # preventing any override attempt by $PARAM_FILE

# avoid these being overridden by old app.parameters
APP_USER=$(whoami)
APP_HOME=${HOME:?}

# default wait for graceful Tomcat shutdown
STOP_SECONDS=${STOP_SECONDS:-30}

# let the following parameters be optional
WAIT_PORTS=${WAIT_PORTS:-}
JMX_HOST=${JMX_HOST:-}
JMX_PORT=${JMX_PORT:-}

# default wait for sockets on any WAIT_PORTS to close (so Tomcat can be successfully restarted)
WAIT_PORTS_SECONDS=${WAIT_PORTS_SECONDS:-240}

# default wait for context to look good after starting Tomcat, less than TimeoutStartSec in tomcat_${APP_USER}.service
START_SECONDS=${START_SECONDS:-900}

# default where Java and Tomcat are
JAVA_HOME=${OVERRIDE_JAVA_HOME:-/usr/java/latest}
CATALINA_BASE=${CATALINA_BASE:-${APP_HOME}/tomcat}
CATALINA_HOME=${CATALINA_HOME:-/usr/local/pkg/tomcat}
export JAVA_HOME CATALINA_BASE CATALINA_HOME

# default log location
LOG_DIR=${LOG_DIR:-${CATALINA_BASE}/logs}
# The APP_LOG file name might be constrained by this script, so don't allow it to be overridden.
APP_LOG=${LOG_DIR}/app-err.log

# Log this script's stdout and stderr to $APP_LOG, as well as outputting to systemd for its logging.
exec &> >(tee -a "$APP_LOG")

# Validate CATALINA_PID and PIDFile in ${SERVICE_FILE}, to avoid starting with bad ones (which gets messy).
EXPECTED_PIDFILE="${APP_HOME}/tomcat/pidfile"
if [[ $PPID -eq 1 ]]; then  # systemd --system on RHEL7
  # EXPECTED_PIDFILE="/run/${APP_USER}/pidfile"   # if we were using systemd --system on RHEL8, but we aren't
  if [ "${CATALINA_PID}" != "${EXPECTED_PIDFILE}" ]; then
    stdbuf -eL echo "CATALINA_PID is ${CATALINA_PID} but should be ${EXPECTED_PIDFILE}" 1>&2
    exit 78 # EX_CONFIG Configuration error
  fi
  if ! grep -q "^Environment=\"CATALINA_PID=${EXPECTED_PIDFILE}\"$" $SERVICE_FILE; then
    stdbuf -eL echo "CATALINA_PID Environment should be set in ${SERVICE_FILE}" 1>&2
    exit 78 # EX_CONFIG Configuration error
  fi
  if ! grep -q "^PIDFile=${EXPECTED_PIDFILE}$" $SERVICE_FILE; then
    stdbuf -eL echo "PIDFile in ${SERVICE_FILE} should be set to ${CATALINA_PID}" 1>&2
    exit 78 # EX_CONFIG Configuration error
  fi
else    # systemd --user on RHEL8
  EXPECTED_PIDFILE="${APP_HOME}/tomcat/pidfile"
  if [ "${CATALINA_PID}" != "${EXPECTED_PIDFILE}" ]; then
    stdbuf -eL echo "CATALINA_PID is ${CATALINA_PID} but should be ${EXPECTED_PIDFILE}" 1>&2
    exit 78 # EX_CONFIG Configuration error
  fi
  if ! grep -q "^Environment=\"CATALINA_PID=%h/tomcat/pidfile\"$" $SERVICE_FILE; then
    stdbuf -eL echo "CATALINA_PID Environment should be set in ${SERVICE_FILE}" 1>&2
    exit 78 # EX_CONFIG Configuration error
  fi
  if ! grep -q "^PIDFile=%h/tomcat/pidfile$" $SERVICE_FILE; then
    stdbuf -eL echo "PIDFile in ${SERVICE_FILE} should be set to ${CATALINA_PID}" 1>&2
    exit 78 # EX_CONFIG Configuration error
  fi
fi

#  Remove log files older than these many days; override in PARAM_FILE
OLD_AGE=${OLD_AGE:-30}

# default JMX monitoring files, using absolute paths just in case
JMX_ACCESS_FILE=${JMX_ACCESS_FILE:-${APP_HOME}/jmxremote.access}
JMX_PASSWORD_FILE=${JMX_PASSWORD_FILE:-${APP_HOME}/jmxremote.password}

# Stop defaulting this, because it may be incompatible with Tomcat 8 or later.
#SOCKET_MBEAN_AGENT=${SOCKET_MBEAN_AGENT:-${APP_HOME}/common-1.17-socketStatisticsAgent.jar}

# JVM won't run unless owner-only access to password file
if [ -f $JMX_PASSWORD_FILE ]; then
  chmod 0400 $JMX_PASSWORD_FILE
fi

# Prevent hidden, confusing overrides of the environment that is configured by this app script.
if [ -f ${CATALINA_BASE}/bin/setenv.sh ]; then
  stdbuf -eL echo "Remove (or move) ${CATALINA_BASE}/bin/setenv.sh to prevent it from overriding $PARAM_FILE and $0" 1>&2
  stdbuf -eL echo "and, if necessary, configure the environment in $PARAM_FILE or $0 instead." 1>&2
  exit 78 # EX_CONFIG Configuration error
fi
if [ -f ${CATALINA_HOME}/bin/setenv.sh ]; then
  stdbuf -eL echo "Remove (or move) ${CATALINA_HOME}/bin/setenv.sh to prevent it from overriding $PARAM_FILE and $0" 1>&2
  stdbuf -eL echo "and, if necessary, configure the environment in $PARAM_FILE or $0 instead." 1>&2
  exit 78 # EX_CONFIG Configuration error
fi

#---------- other environment variables -------------

# default with HotSpot JIT (default); approximates default heap sizes.
CATALINA_OPTS=${CATALINA_OPTS:-''}
JVM_HEAP=${JVM_HEAP:-'-Xms64m -Xmx128m'}
CO="$JVM_HEAP $CATALINA_OPTS"

# default avoidance of broken SSL
JVM_SECURITY=${JVM_SECURITY:-'-Djsse.enableSNIExtension=false'}
CO="$CO $JVM_SECURITY"

# the following CATALINA_OPTS are added in a way that cannot be overridden
CO="$CO -server"

#   additional options for verbose:gc
VERBOSE_GC=${VERBOSE_GC:-'-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+HeapDumpOnOutOfMemoryError'}
CO="$CO $VERBOSE_GC"

# optionally specify a garbage collector, for load testing
#CO="$CO -XX:+UseSerialGC"
#CO="$CO -XX:+UseParallelGC"
#CO="$CO -XX:+UseParallelOldGC"
#CO="$CO -XX:+UseConcMarkSweepGC"

# additional options for JMX (for management via VisualVM or Zabbix)
if [ ! -z "$JMX_PORT" ]; then
  CO="$CO -Dcom.sun.management.jmxremote.port=$JMX_PORT"
  JMX_RMI_PORT=${JMX_RMI_PORT:-$(expr $JMX_PORT + 100)}  # default to ITS convention, if not given
  WAIT_PORTS="${WAIT_PORTS} $JMX_RMI_PORT"  # add defaulted port (even though it's redundant if not defaulted)
  CO="$CO -Dcom.sun.management.jmxremote.rmi.port=$JMX_RMI_PORT"
  CO="$CO -Dcom.sun.management.jmxremote.ssl=false"
  CO="$CO -Dcom.sun.management.jmxremote.authenticate=true"
  CO="$CO -Dcom.sun.management.jmxremote.access.file=$JMX_ACCESS_FILE"
  CO="$CO -Dcom.sun.management.jmxremote.password.file=$JMX_PASSWORD_FILE"
  if [ ! -z "$JMX_HOST" ]; then
    CO="$CO -Djava.rmi.server.hostname=$JMX_HOST"
  fi

  # optional socket wait stats for Zabbix.  This is a risky, low-level hack,
  # so you should not set $SOCKET_MBEAN_AGENT if it messes up any networking.
  if [ -f "${SOCKET_MBEAN_AGENT:-}" ]; then
    CO="$CO -javaagent:$SOCKET_MBEAN_AGENT"
  fi
fi

PATH=${JAVA_HOME}/bin:${PATH}

CATALINA_OPTS=$CO
export CATALINA_PID CATALINA_OPTS PATH

#-------------------- helpers -----------------------

cat_pid() {
    cat ${CATALINA_PID} 2> /dev/null
}

ps_tomcat() {
    ps -ef | grep -w $1 | grep java | grep util.logging
}

netstat_port() {
  if [ -x /bin/ss ]; then    # for Jenkins on docci debian:stretch (no netstat)
    /bin/ss -a | awk -v hnp=":$1$" '$5 ~ hnp'
  elif [ $(uname) = "Darwin" ]; then     # macOS (but not systemd, so this script won't work, anyway)
    netstat -v -a -n | awk -v hnp="[.]$1$" '$4 ~ hnp'
  else  # RHEL, etc
    netstat -v -a -n -t | gawk -v hnp=":$1$" '$4 ~ hnp'
  fi
}

# parameters: 0 or more port numbers to wait on
wait_for_ports_to_close() {
  if [ $# -eq 0 ]; then
    echo "no ports to wait for sockets to close"
  else
    echo "Waiting up to $WAIT_PORTS_SECONDS seconds for sockets on ports $* to close..."
    WAITED=0
    for PORT do
      PORT_STATUS=$(netstat_port $PORT)
      if [ ! -z "$PORT_STATUS" -a $WAITED -le $WAIT_PORTS_SECONDS ]; then
        echo "Waiting for sockets on port $PORT to close..."
        while [ ! -z "$PORT_STATUS" ]; do
          echo $PORT_STATUS
          sleep 3
          WAITED=$(expr $WAITED + 3)
          PORT_STATUS=$(netstat_port $PORT)
        done
      fi
      echo "port $PORT is free"
    done
  fi
}

rotate() {
    pushd $LOG_DIR > /dev/null
    APP_LOG_FILE=$(basename "$APP_LOG")
    LOG_FILES=$(ls *txt *log *log.? catalina.out catalina.out-* 2> /dev/null | grep -v "^$APP_LOG_FILE$")
    if [ -z "$LOG_FILES" ]; then
        # no files to rotate, so don't create $BKUP_DIR (normal for starting)
        popd > /dev/null
        return 0
    fi

    BKUP_DIR=$(date '+%y%m%d-%H%M')
    echo "Creating backup directory, $LOG_DIR/$BKUP_DIR..."
    if ! mkdir $BKUP_DIR; then
        echo "Can't create $LOG_DIR/$BKUP_DIR."
        echo "Create one and move the log files there (or, if it already exists, then wait a minute and try again)."
        popd > /dev/null
        return 1
    fi

    echo "Moving log files to $LOG_DIR/$BKUP_DIR..."
    /bin/mv $LOG_FILES $BKUP_DIR

    CNT=$(ls $BKUP_DIR | wc -l)
    echo "$CNT files moved to $LOG_DIR/$BKUP_DIR"

    echo "Compressing files in $LOG_DIR/$BKUP_DIR"
    gzip -v $LOG_DIR/$BKUP_DIR/*

    # Rotate $APP_LOG only after this script exits, so that tee and tail don't miss anything,
    if [ $1 = "stopping" ]; then  # and not on starting, so $APP_LOG will correspond with the other log files.
        trap '/bin/mv "$APP_LOG" "$LOG_DIR/$BKUP_DIR" && gzip "$LOG_DIR/$BKUP_DIR/$APP_LOG_FILE"' EXIT
    fi
    popd > /dev/null
    return 0
}


age_logs() {
    echo "Aging off log files older than [$OLD_AGE] days in [$LOG_DIR]..."

    # Find directories in $LOG_DIR older than $OLD_AGE days
    # and remove them, their contents, and say their name.
    # If $LOG_DIR is a symbolic link, then follow it.
    #
    find -H $LOG_DIR -maxdepth 1 -type d -mtime +${OLD_AGE} -print -exec rm -rf {} \;
}

start() {
    # Make sure $LOG_DIR has no old catalina.out, to get a correct check_context_startup, in case the previous stop was ungraceful.
    if ! rotate starting; then
      echo "Has leftover log files but cannot rotate them; app script giving up."
      echo -e "\n\n" && return 9
    fi

    echo "Starting Tomcat at $(date)"
    ${CATALINA_HOME}/bin/startup.sh -config $CATALINA_BASE/conf/server.xml
    STARTUP_EXIT_CODE=$?
    if [ $STARTUP_EXIT_CODE -ne 0 ]; then
      echo "Tomcat startup.sh exited with code $STARTUP_EXIT_CODE, app script giving up."
      echo -e "\n\n" && return $STARTUP_EXIT_CODE
    fi

    sleep 3

    if [ ! -f $CATALINA_PID ]; then
        echo "Tomcat not started (pid file not found)"
        echo -e "\n\n" && return 1
    fi

    PID=$(cat_pid)

    if ps_tomcat $PID; then
        echo "Tomcat started; now checking for good context startup..."
        check_context_startup
        CONTEXT_RESULT=$?
        if [ $CONTEXT_RESULT -ne 0 ]; then
            echo -e "\nContext startup failed; trying a graceful shutdown..."
            # Call stop in a group command, {}, not in a subshell, (), because a subshell would trigger the EXIT trap.
            { stop && echo -n "Tomcat stopped, "; } || echo -n "Tomcat not stopped, "
            echo "after context startup failed.  Exiting with error code $CONTEXT_RESULT."
        fi
        echo -e "\n\n" && return $CONTEXT_RESULT
    else
        echo "Tomcat not started"
        echo -e "\n\n" && return 1
    fi
}

check_context_startup() {
    CATALINA=$LOG_DIR/catalina.out
    echo -e "\nStarted following $CATALINA..."
    tail -F $CATALINA --pid=$$ 2>/dev/null &  # to stdout and $APP_LOG, while we're waiting on it
    TAIL_PID=$!
    disown %%  # to definitely avoid Terminated message when tail is killed
    WAITED=0
    BAD="SEVERE"  # e.g., "^SEVERE: Context .* startup failed", or "^SEVERE: Failed to initialize end point"
    GOOD="INFO.* Server startup in "
    while ! grep -q "${BAD}\|${GOOD}" $CATALINA && [ $START_SECONDS -eq 0 -o $WAITED -lt $START_SECONDS ]; do
        sleep 1
        WAITED=$(expr $WAITED + 1)
    done
    kill $TAIL_PID
    wait $TAIL_PID 2>/dev/null  # probably also avoids Terminated message, and syncs on kill for clean log
    echo "Stopped following $CATALINA"
    if grep "$BAD" $CATALINA ; then
        return 10
    elif grep -q "$GOOD" $CATALINA ; then
        echo "Context startup looks good."
        return 0
    else
        echo "Error: $CATALINA did not look good within $START_SECONDS seconds"
        return 11
    fi
}

stop() {
    echo "Stopping Tomcat servlet container at $(date)"
    # Providing CATALINA_PID and $STOP_SECONDS, but not -force, so Tomcat 8 catalina.sh does a kill -3 thread dump on timeout.
    ${CATALINA_HOME}/bin/shutdown.sh $STOP_SECONDS
    SHUTDOWN_EXIT_CODE=$?
    if [ $SHUTDOWN_EXIT_CODE -ne 0 ]; then
      echo "Tomcat shutdown.sh exited with code $SHUTDOWN_EXIT_CODE, but app script will try, too."
    fi

    PID=$(cat_pid)

    if [ -z "$PID" ]; then
        PID=$(ps_tomcat ^$APP_USER | awk '{print $2}')
    fi

    if [ ! -z "$PID" ]; then
      if ps_tomcat $PID > /dev/null; then
        echo
        echo "Tomcat process is still running! Killing $PID..."
        kill -9 $PID
        sleep 2
      else
        echo "ok"
      fi
    fi
    wait_for_ports_to_close $WAIT_PORTS

    rotate stopping
    age_logs

    if [ ! -z "$PID" ] && ps_tomcat $PID; then
      echo "Tomcat still running after kill!"
      return 1
    else
      echo "Tomcat not running."
      /bin/rm $CATALINA_PID 2> /dev/null
      return 0
    fi
}


case "$1" in
'start')
    start
    ;;
'stop')
    stop
    ;;
*)
    stdbuf -eL echo "Usage: $0 { start | stop }" 1>&2
    exit 64 # EX_USAGE Command line usage error
    ;;
esac
# eof: sapp
