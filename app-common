#! /bin/sh
# app - Run Tomcat servlet container.
#     - 10/02/08, Russell Tokuyama (UH ITS)
#
# $Id$
#
# Mod: 11/25/08, russ@hawaii.edu; Silenced error output of kill.
#      12/10/08, jbeutel@hawaii.edu; added JMX and wait for stop before kill
#      04/06/09, jbeutel@hawaii.edu; updated JMX config
#      07/10/09, russ@hawaii.edu; Fixed ps_tomcat to find the JVM process
#      09/14/09, jbeutel@hawaii.edu; use out-of-the-box JMX auth instead of single-port agent
#      09/15/09, jbeutel@hawaii.edu; optionally specify garbage collector for load testing
#      09/17/09, jbeutel@hawaii.edu; optional socket MBean agent for statistics only (no logging)
#      11/04/09, jbeutel@hawaii.edu; added YourKit option & updated versions
#      12/02/09, jbeutel@hawaii.edu; specify private network for JMX callback
#      02/22/10, jbeutel@hawaii.edu; on stop wait for listening port to close
#      03/10/10, jbeutel@hawaii.edu; parameterize and allow for overrides
#      07/12/13, jbeutel@hawaii.edu; updated default jdk to Solaris 1.6.0_51
#      12/02/15, cahana@hawaii.edu; merged with app script from the current RHEL servers
#      12/04/16, jbeutel@hawaii.edu; added JMX_RMI_PORT & updated defaults
#      04/18/16, cahana@hawaii.edu; commented out YourKit Profiler references
#      05/21/18, cahana@hawaii.edu; removed https.protocols from JVM_SECURITY to work with CAS 5/Tomcat 8.5
#      04/29/19, duckart@hawaii.edu; Differentiate the Tomcat not started messages.
#      07/19/19, jbeutel@hawaii.edu; added netstat_port() support for macOS 10.14
#      02/11/21, jbeutel@hawaii.edu; stop specifying gzip path, for macOS 10.15
#      02/11/21, jbeutel@hawaii.edu; wait for default JMX_RMI_PORT to close
#---------------------------------------------------------------------
# Spec:
#   1. Run as the daemon user.
#   2. Returns
#        0 if successfully starts or checks that Tomcat is running
#        1 if Tomcat not running
#---------------------------------------------------------------------
# Install:
#   1. Install as app-common in /usr/local/bin.
#   2. Symlink from /usr/local/bin/app-common to app in APP_USER's home dir.
#   3. For convenience, add APP_USER's home dir to PATH env var.
#---------------------------------------------------------------------
#

# You shouldn't need to change variable settings in this script;
# you can override all variables like FOO=${FOO:-default} in the app.parameters file.

# include parameters from same dir as this script
PARAM_FILE=`dirname $0`/app.parameters
if [ ! -f $PARAM_FILE ] ; then
  echo "$PARAM_FILE not found" 1>&2
  exit 1
fi
. $PARAM_FILE

# make sure we got the required parameter
APP_USER=${APP_USER:?}

# default wait for graceful Tomcat shutdown
STOP_SECONDS=${STOP_SECONDS:-30}

# default for YourKit CPU/memory profiling
#YK_PORT=${YK_PORT:-`expr $JMX_PORT - 1000`} # by ITS convention
#YK_HOME=${YK_HOME:-/usr/local/spkg/yjp-8.0.18}

# default
if [ `uname` = "SunOS" ]; then
  APP_HOME=${APP_HOME:-/var/home/${APP_USER}}
else
  APP_HOME=${APP_HOME:-/home/${APP_USER}} # on Linux
fi

# default where Java and Tomcat are
JAVA_HOME=${OVERRIDE_JAVA_HOME:-/usr/java/latest}
CATALINA_BASE=${CATALINA_BASE:-${APP_HOME}/tomcat}
CATALINA_HOME=${CATALINA_HOME:-/usr/local/pkg/tomcat}
export JAVA_HOME CATALINA_BASE CATALINA_HOME

# default log locations
LOG_DIR=${LOG_DIR:-${CATALINA_BASE}/logs}
APP_LOG=${APP_LOG:-${LOG_DIR}/app-err.log}

#  Remove log files older than these many days; override in PARAM_FILE
OLD_AGE=${OLD_AGE:-30}

# default JMX monitoring files, using absolute paths just in case
JMX_ACCESS_FILE=${JMX_ACCESS_FILE:-${APP_HOME}/jmxremote.access}
JMX_PASSWORD_FILE=${JMX_PASSWORD_FILE:-${APP_HOME}/jmxremote.password}
SOCKET_MBEAN_AGENT=${SOCKET_MBEAN_AGENT:-${APP_HOME}/common-1.17-socketStatisticsAgent.jar}

# JVM won't run unless owner-only access to password file
if [ -f $JMX_PASSWORD_FILE ] ; then
  chmod 0400 $JMX_PASSWORD_FILE
fi

CURR_USER=`id | sed 's/[^(]*(\([^)]*\)).*$/\1/'`

if [ ${CURR_USER} != ${APP_USER} ] ; then
  echo "You must change to the ${APP_USER} to run this command."
  exit 1
fi

#---------- other environment variables -------------
CATALINA_PID=${CATALINA_PID:-${CATALINA_BASE}/pidfile}

# default with HotSpot JIT (default); approximates default heap sizes.
CATALINA_OPTS=${CATALINA_OPTS:-''}
JVM_HEAP=${JVM_HEAP:-'-Xms64m -Xmx128m'}
CO="$JVM_HEAP $CATALINA_OPTS"

# default avoidance of broken SSL
JVM_SECURITY=${JVM_SECURITY:-'-Djsse.enableSNIExtension=false'}
CO="$CO $JVM_SECURITY"

# the following CATALINA_OPTS are added in a way that cannot be overridden
CO="$CO -server"

#   additional options for verbose:gc
VERBOSE_GC=${VERBOSE_GC:-'-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+HeapDumpOnOutOfMemoryError'}
CO="$CO $VERBOSE_GC"

# optionally specify a garbage collector, for load testing
#CO="$CO -XX:+UseSerialGC"
#CO="$CO -XX:+UseParallelGC"
#CO="$CO -XX:+UseParallelOldGC"
#CO="$CO -XX:+UseConcMarkSweepGC"


# additional options for JMX (for management via VisualVM or Zabbix)
if [ ! -z "$JMX_PORT" ]; then
  CO="$CO -Dcom.sun.management.jmxremote.port=$JMX_PORT"
  JMX_RMI_PORT=${JMX_RMI_PORT:-`expr $JMX_PORT + 100`}  # default to ITS convention, if not given
  WAIT_PORTS="${WAIT_PORTS} $JMX_RMI_PORT"  # add defaulted port (even though it's redundant if not defaulted)
  CO="$CO -Dcom.sun.management.jmxremote.rmi.port=$JMX_RMI_PORT"
  CO="$CO -Dcom.sun.management.jmxremote.ssl=false"
  CO="$CO -Dcom.sun.management.jmxremote.authenticate=true"
  CO="$CO -Dcom.sun.management.jmxremote.access.file=$JMX_ACCESS_FILE"
  CO="$CO -Dcom.sun.management.jmxremote.password.file=$JMX_PASSWORD_FILE"
fi
if [ ! -z "$JMX_HOST" ]; then
  CO="$CO -Djava.rmi.server.hostname=$JMX_HOST"
fi

# optional socket wait stats for Zabbix.  This is a risky, low-level hack,
# so you should rm the $SOCKET_MBEAN_AGENT file if it messes up any networking.
if [ -f $SOCKET_MBEAN_AGENT ]; then
  CO="$CO -javaagent:$SOCKET_MBEAN_AGENT"
fi

PATH=${JAVA_HOME}/bin:${PATH}

CATALINA_OPTS=$CO
export CATALINA_PID CATALINA_OPTS PATH

#-------------------- helpers -----------------------

cat_pid() {
    cat ${CATALINA_PID} 2> /dev/null
}

ps_tomcat() {
    ps -ef | grep $1 | grep java | grep util.logging
}

echo_n() {
  if [ `uname` = "SunOS" ]; then
    /usr/ucb/echo -n $*
  else
    echo -n $*
  fi
}

netstat_port() {
  if [ `uname` = "SunOS" ]; then
    netstat -a | nawk -v hnp="[.]$1$" '$1 ~ hnp'
  elif [ `uname` = "Darwin" ]; then     # macOS
    netstat -v -a -n | awk -v hnp="[.]$1$" '$4 ~ hnp'
  else
    netstat -v -a -n -t | gawk -v hnp=":$1$" '$4 ~ hnp'
  fi
}

# parameters: 0 or more port numbers to wait on
wait_for_ports_to_close() {
  for PORT do
    PORT_STATUS=`netstat_port $PORT`
    if [ ! -z "$PORT_STATUS" ]; then
      echo "Waiting for sockets on port $PORT to close..."
      while [ ! -z "$PORT_STATUS" ]; do
        echo $PORT_STATUS
        sleep 7
        PORT_STATUS=`netstat_port $PORT`
      done
    fi
    echo "port $PORT is free"
  done
}

rotate() {
    BKUP_DIR=`date '+%y%m%d-%H%M'`

    cd $LOG_DIR

    echo "Creating backup directory, $LOG_DIR/$BKUP_DIR..."
    mkdir $BKUP_DIR

    if [ ! $? ] ; then
        echo "Can't create $LOG_DIR/$BKUP_DIR."
        echo "Create one and move the log files there."
        return 1
    fi

    echo "Moving log files to $LOG_DIR/$BKUP_DIR..."
    /bin/mv [ae]*txt *log catalina.out $BKUP_DIR 2> /dev/null
    /bin/mv *log.? $BKUP_DIR 2> /dev/null

    CNT=`ls $BKUP_DIR | wc -l`
    echo "$CNT files moved to $LOG_DIR/$BKUP_DIR"

    echo "Compressing files in $LOG_DIR/$BKUP_DIR"
    gzip -v $LOG_DIR/$BKUP_DIR/*
    return 0
}


age_logs() {
    echo "Aging off log files older than [$OLD_AGE] in [$LOG_DIR]..."

    # Find directories in the current directory older than $OLD_AGE
    # and remove them, their contents, and say their name.
    #
    find $LOG_DIR -maxdepth 1 -type d -mtime +${OLD_AGE} -print -exec rm -rf {} \;
}

start() {
	if [ "$1" = "yourkit" -a ! -z "$YK_PORT" ]; then
		HOSTNAME=`hostname`
		JAVA_OPTS="-agentpath:\
$YK_HOME/bin/solaris-sparc-32/libyjpagent.so=disablestacktelemetry,\
disableexceptiontelemetry,delay=10000,\
sessionname=$HOSTNAME-$APP_USER,port=$YK_PORT $JAVA_OPTS"
		echo "  JAVA_OPTS=$JAVA_OPTS"
		export JAVA_OPTS
	fi

    echo "Starting Tomcat at `date`" | tee -a $APP_LOG
    ${CATALINA_HOME}/bin/startup.sh -config $CATALINA_BASE/conf/server.xml >> $APP_LOG 2>&1

    sleep 3

    if [ ! -f $CATALINA_PID ]; then
        echo "Tomcat not started (pid file not found)"
        return 1
    fi

    TC_PID=`cat_pid`

    if ps_tomcat $TC_PID; then
        echo "Tomcat started"
        return 0
    else
        echo "Tomcat not started"
        return 1
    fi
}


stop() {
    echo "Stopping Tomcat servlet container at `date`" | tee -a $APP_LOG
    ${CATALINA_HOME}/bin/shutdown.sh >> $APP_LOG 2>&1
    sleep 5

    PID=`cat_pid`

    if [ -z "$PID" ]; then
        PID=`ps_tomcat $APP_USER | awk '{print $2}'`
    fi

    if [ ! -z "$PID" ]; then
      if [ $STOP_SECONDS -gt 0 ]; then
        echo_n "Waiting up to $STOP_SECONDS seconds for Tomcat to stop..."
        WAITED=0
        while ps_tomcat $PID > /dev/null && [ $WAITED -lt $STOP_SECONDS ]; do
	  echo_n "."
          sleep 3
          WAITED=`expr $WAITED + 3`
        done
      fi

      if ps_tomcat $PID > /dev/null; then
        echo
        echo "Tomcat process is still running! Killing $PID..."
        kill -9 $PID
        sleep 2
      else
        echo "ok"
      fi
    fi
    wait_for_ports_to_close $WAIT_PORTS

    rotate
    age_logs
    check
}


check() {
    KEY=`cat_pid`
    if [ -z "$KEY" ]; then
        # no pid file
        KEY=$APP_USER
    fi

    if ps_tomcat $KEY; then
      return 0
    else
      echo "Tomcat not running."
      /bin/rm $CATALINA_PID 2> /dev/null
      return 1
    fi
}


case "$1" in
'start')
    start
    ;;
'stop')
    stop
    ;;
'check')
    check
    ;;
'yourkit')
	start yourkit
	;;
*)
    echo "Usage: $0 { start | stop | check | yourkit }"
    ;;
esac


# eof: app
